{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.js","components/Statistic/Statistic.js","components/Statistics/Statistics.js","components/App.js","index.js"],"names":["FeedbackOptions","onLeaveFeedback","type","onClick","name","Statistic","label","value","Statistics","good","neutral","bad","total","positivePercentage","App","state","countClickAmount","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","title","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAqBeA,EAlBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAH,OACtB,oCACE,4BAAQC,KAAK,SAASC,QAASF,EAAiBG,KAAK,QAArD,QAGA,4BAAQF,KAAK,SAASC,QAASF,EAAiBG,KAAK,WAArD,WAGA,4BAAQF,KAAK,SAASC,QAASF,EAAiBG,KAAK,OAArD,SCGWC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAChB,2BACGD,EADH,KACYC,ICiBCC,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,kBAAC,EAAD,CAAWP,MAAM,OAAOC,MAAOE,IAC/B,kBAAC,EAAD,CAAWH,MAAM,UAAUC,MAAOG,IAClC,kBAAC,EAAD,CAAWJ,MAAM,MAAMC,MAAOI,IAC9B,kBAAC,EAAD,CAAWL,MAAM,QAAQC,MAAOK,IAChC,kBAAC,EAAD,CAAWN,MAAM,oBAAoBC,MAAOM,MCN3BC,E,2MACnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,iBAAmB,YAAiB,IAC1BZ,EADyB,EAAba,OACZb,KACR,EAAKc,UAAS,SAAAC,GAAS,sBAAQf,EAAOe,EAAUf,GAAQ,O,EAG1DgB,mBAAqB,WAGnB,OAFeC,OAAOC,OAAO,EAAKP,OACVQ,QAAO,SAACC,EAAKjB,GAAN,OAAgBiB,EAAMjB,IAAO,I,EAI9DkB,gCAAkC,WAAO,IAC/BhB,EAAS,EAAKM,MAAdN,KACR,OAAOA,EAAO,EAAI,EAAIiB,KAAKC,MAAc,IAAPlB,EAAc,EAAKW,uB,wEAG7C,IAAD,EACwBQ,KAAKb,MAA5BN,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACvB,OACE,oCACE,6BAASkB,MAAM,mBACb,qDACA,kBAAC,EAAD,CAAiB5B,gBAAiB2B,KAAKZ,oBAEzC,6BAASa,MAAM,cACb,0CACA,kBAAC,EAAD,CACEpB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOgB,KAAKR,qBACZP,mBAAoBe,KAAKH,0C,GAtCJK,aCAjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.53a8df8a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ onLeaveFeedback }) => (\n  <>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"good\">\n      Good\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"neutral\">\n      Neutral\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"bad\">\n      Bad\n    </button>\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistic = ({ label, value }) => (\n  <p>\n    {label}: {value}\n  </p>\n);\n\nStatistic.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Statistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Statistic from '../Statistic/Statistic';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <Statistic label=\"Good\" value={good} />\n    <Statistic label=\"Neutral\" value={neutral} />\n    <Statistic label=\"Bad\" value={bad} />\n    <Statistic label=\"Total\" value={total} />\n    <Statistic label=\"Positive feedback\" value={positivePercentage} />\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countClickAmount = ({ target }) => {\n    const { name } = target;\n    this.setState(prevState => ({ [name]: prevState[name] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const clicks = Object.values(this.state);\n    const feedback = clicks.reduce((acc, value) => acc + value, 0);\n    return feedback;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return good < 1 ? 0 : Math.round((good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <section title=\"FeedbackOptions\">\n          <h2>Please leave feedback</h2>\n          <FeedbackOptions onLeaveFeedback={this.countClickAmount} />\n        </section>\n        <section title=\"Statistics\">\n          <h2>Statistics</h2>\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={this.countTotalFeedback()}\n            positivePercentage={this.countPositiveFeedbackPercentage()}\n          />\n        </section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}