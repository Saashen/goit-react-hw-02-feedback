{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Statistic/Statistic.js","components/Statistics/Statistics.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Section","title","children","FeedbackOptions","options","onLeaveFeedback","type","onClick","name","good","neutral","bad","Statistic","label","value","Statistics","total","positivePercentage","Notification","message","defaultProps","App","state","countClickAmount","target","setState","prevState","countTotalFeedback","Object","values","reduce","acc","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","document","getElementById"],"mappings":"kOAeeA,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,oCACE,4BAAe,eAAVD,EAAyB,aAAe,yBAC5CC,ICoBUC,EAvBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oCACE,4BAAQC,KAAK,SAASC,QAASF,EAAiBG,KAAK,QAClDJ,EAAQK,MAEX,4BAAQH,KAAK,SAASC,QAASF,EAAiBG,KAAK,WAClDJ,EAAQM,SAEX,4BAAQJ,KAAK,SAASC,QAASF,EAAiBG,KAAK,OAClDJ,EAAQO,OCEAC,EAXG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAChB,2BACGD,EADH,KACYC,ICiBCC,EAlBI,SAAC,GAAD,IAAGN,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKK,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,kBAAC,EAAD,CAAWJ,MAAM,OAAOC,MAAOL,IAC/B,kBAAC,EAAD,CAAWI,MAAM,UAAUC,MAAOJ,IAClC,kBAAC,EAAD,CAAWG,MAAM,MAAMC,MAAOH,IAC9B,kBAAC,EAAD,CAAWE,MAAM,QAAQC,MAAOE,IAChC,kBAAC,EAAD,CAAWH,MAAM,oBAAoBC,MAAOG,MCP1CC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,2BAAIA,IAGbD,EAAaE,aAAe,CAC1BD,QAAS,IAOID,QCRMG,E,2MACnBC,MAAQ,CACNb,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPY,iBAAmB,YAAiB,IAC1Bf,EADyB,EAAbgB,OACZhB,KACR,EAAKiB,UAAS,SAAAC,GAAS,sBAAQlB,EAAOkB,EAAUlB,GAAQ,O,EAG1DmB,mBAAqB,WAGnB,OAFeC,OAAOC,OAAO,EAAKP,OACVQ,QAAO,SAACC,EAAKjB,GAAN,OAAgBiB,EAAMjB,IAAO,I,EAI9DkB,gCAAkC,WAAO,IAC/BvB,EAAS,EAAKa,MAAdb,KACR,OAAOA,EAAO,EAAI,EAAIwB,KAAKC,MAAc,IAAPzB,EAAc,EAAKkB,uB,wEAG7C,IAAD,EACwBQ,KAAKb,MAA5Bb,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IAEvB,OACE,oCACE,kBAAC,EAAD,CAASV,MAAM,mBACb,kBAAC,EAAD,CACEG,QAAS+B,KAAKb,MACdjB,gBAAiB8B,KAAKZ,oBAGzBY,KAAKR,qBAAuB,EAC3B,kBAAC,EAAD,CAAS1B,MAAM,cACb,kBAAC,EAAD,CACEQ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLK,MAAOmB,KAAKR,qBACZV,mBAAoBkB,KAAKH,qCAI7B,kBAAC,EAAD,CAAcb,QAAQ,2B,GA7CCiB,aCHjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f213b067.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n  <>\n    <h2>{title === 'Statistics' ? 'Statistics' : 'Please leave feedback'}</h2>\n    {children}\n  </>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"good\">\n      {options.good}\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"neutral\">\n      {options.neutral}\n    </button>\n    <button type=\"button\" onClick={onLeaveFeedback} name=\"bad\">\n      {options.bad}\n    </button>\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.shape({\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n  }).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport default FeedbackOptions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Statistic = ({ label, value }) => (\n  <p>\n    {label}: {value}\n  </p>\n);\n\nStatistic.propTypes = {\n  label: PropTypes.string.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport default Statistic;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Statistic from '../Statistic/Statistic';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <Statistic label=\"Good\" value={good} />\n    <Statistic label=\"Neutral\" value={neutral} />\n    <Statistic label=\"Bad\" value={bad} />\n    <Statistic label=\"Total\" value={total} />\n    <Statistic label=\"Positive feedback\" value={positivePercentage} />\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.defaultProps = {\n  message: '',\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\n\nimport Section from './Section/Section';\nimport FeedbackOptions from './FeedbackOptions/FeedbackOptions';\nimport Statistics from './Statistics/Statistics';\nimport Notification from './Notification/Notification';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countClickAmount = ({ target }) => {\n    const { name } = target;\n    this.setState(prevState => ({ [name]: prevState[name] + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const clicks = Object.values(this.state);\n    const feedback = clicks.reduce((acc, value) => acc + value, 0);\n    return feedback;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good } = this.state;\n    return good < 1 ? 0 : Math.round((good * 100) / this.countTotalFeedback());\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n\n    return (\n      <>\n        <Section title=\"FeedbackOptions\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.countClickAmount}\n          />\n        </Section>\n        {this.countTotalFeedback() > 0 ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}